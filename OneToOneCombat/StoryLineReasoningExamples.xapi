$SetParameter A_DEBUG/G_GENERAL/N_RECORD_LINK_QUANTUMS = 1.0
$SetParameter A_DEBUG/G_GENERAL/N_RECORD_SHADOW_QUANTUMS = 1.0
$SetParameter A_DEBUG/G_GENERAL/N_RECORD_FOCUS_MEMORY_QUANTUMS = 1.0

// $DebugHere

$CreateScene #Reality CloseOthers With Instances "Achilles" greek w_c_warrior, "Hector" trojan w_c_warrior
"Achilles" / hates / "Hector".
"Achilles" / wa_v_sword_attack / "Hector".
"Hector" / wa_v_sword_defend / "Achilles".
"Achilles" / wa_v_sword_attack / "Hector".
"Hector" / wa_v_sword_defend / "Achilles".
"Hector" / wcr_vr_tired / "Hector".
"Achilles" / wa_v_sword_attack / "Hector".
"Hector" / wa_v_sword_defend / "Achilles".
// Experiments about continuation 
${{
//
// extract the current in-focus story lines
//
var storylines = introspect.inFocusStoryLines();
print("The number of story lines in focus:", storylines.size());
//
// This part is the listing and examining of the current story line
//
var stlFocus = introspect.currentStoryLine();
print("**********************************************");
print("The current storyline");
print("**********************************************");
print("----------------------------------------------");
print("Verbalizing the VIs");
print("----------------------------------------------");
print(introspect.verbalize(stlFocus));
print("----------------------------------------------");
print("List the scenes and instances");
print("----------------------------------------------");
for(i = 0; i < stlFocus.getScenes().size(); i++) {
   scene = stlFocus.getScenes().get(i);
   for(j = 0; j < scene.getSceneMembers().size(); j++) {
       instance = scene.getSceneMembers().get(j);
       print(introspect.verbalize(instance));
   }
}
print("**********************************************");



//
// extract the story lines shadowing the current one
//
var shstls = introspect.createShadowStoryLines(stlFocus);
print("Number of shadow story lines:" + shstls.size());

var shStlHead;
for(i = 0; i < shstls.size(); i++) {
   var stl = shstls.get(i).getKey();
   if (i == 0) {
      shStlHead = stl;
   }
   print("----------------------------------------------");
   print("Storyline: <<how we name them???>> overall shadow strength=" + shstls.get(i).getValue());
   print("----------------------------------------------");
   print(introspect.verbalize(stl));
   print("----------------------------------------------");
}
//
// print the strongest shadow story line
//
print("----------------------------------------------");
print("The strongest shadow storyline");
print("----------------------------------------------");
print(introspect.verbalize(shStlHead));
print("----------------------------------------------");
//
// print the matching instances and matching level
//
print("----------------------------------------------");
print("Instance mapping between the focus line\n and the best shadow");
print("----------------------------------------------");
print(introspect.formatInstanceMapping(introspect.getLikelyInstanceMapping(stlFocus, shStlHead)));
print("----------------------------------------------");
print("VI mapping between the focus line\n and the best shadow");
print("----------------------------------------------");
print(introspect.formatViMapping(introspect.getLikelyViMapping(stlFocus, 
shStlHead)));
print("*********************************************");
print("Completion - based on the strongest shadow");
print("*********************************************");
print(introspect.showCompletion());
print("*********************************************");
print("Prediction based on the strongest story line");
print("*********************************************");
var pred = introspect.createPrediction(stlFocus, shStlHead);
print("**********Prediction created ******************************");
for(i = 0; i < pred.size(); i++) {
   print(introspect.verbalize(pred.get(i)));
};
print("----------------------------------------------");
print("Now enact the prediction");
print("----------------------------------------------");
for(i = 0; i < pred.size(); i++) {
   introspect.enactVi(pred.get(i));
};

$}}
$DebugHere
